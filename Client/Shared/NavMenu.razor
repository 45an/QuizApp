@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using QuizApp.Client.Shared.Models
@using Newtonsoft.Json.Linq;

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="sidebar">
    <div class="top-row navbar navbar-dark">
        <div class="container-fluid navbar-header">
            <button title="Navigation menu" class="navbar-toggler" @onclick="AlwaysToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
            <a class="@NavMenuCssClass navbar-brand" href="">QuizApp</a>
        </div>
    </div>

    <div class="@NavMenuCssClass never-collapse nav-scrollable flex-column justify-content-between flex-grow">
        <nav class="flex-column">
            <div class="nav-item px-3">
                <NavLink class="nav-link align-items-center" href="" Match="NavLinkMatch.All" @onclick="ToggleNavMenu">
                    <i class="fa-solid fa-home" style="width: 2rem;" aria-hidden="true"></i><p class="@NavMenuCssClass list-item-text p-0 m-0"> Home</p>
                </NavLink>
            </div>
        <AuthorizeView>

            <Authorized>
            <div class="nav-item px-3">
                @if(userId != null){
                    <NavLink class="nav-link" href="@("userQuiz/" + userId)" @onclick="ToggleNavMenu">
                        <i class="fa-solid fa-user" style="width: 2rem;" aria-hidden="true"></i><p class="@NavMenuCssClass list-item-text p-0 m-0"> Your Quiz's</p>
                    </NavLink>
                } else {
                    <NavLink class="nav-link" href="userQuiz/" @onclick="ToggleNavMenu">
                        <i class="fa-solid fa-user" style="width: 2rem;" aria-hidden="true"></i><p class="@NavMenuCssClass list-item-text p-0 m-0"> Your Quiz's</p>
                    </NavLink>
                }
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="createQuiz" @onclick="ToggleNavMenu">
                    <i class="fa-solid fa-square-plus" style="width: 2rem;" aria-hidden="true"></i><p class="@NavMenuCssClass list-item-text p-0 m-0"> Create Quiz</p>
                </NavLink>
            </div>
            </Authorized>

            <NotAuthorized>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="authentication/login" style="cursor:pointer" @onclick="ToggleNavMenu">
                    <i class="fa-solid fa-right-to-bracket" style="width: 2rem;" aria-hidden="true"></i><p class="@NavMenuCssClass list-item-text p-0 m-0"> Log in</p>
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="authentication/register" @onclick="ToggleNavMenu">
                    <i class="fa-solid fa-user-plus" style="width: 2rem;" aria-hidden="true"></i><p class="@NavMenuCssClass list-item-text p-0 m-0"> Register</p>
                </NavLink>
            </div>
            </NotAuthorized>

        </AuthorizeView>
        </nav>
        <nav class="flex-column">
            <div class="nav-item px-3">
                <AuthorizeView>
                    <Authorized>
                        <NavLink class="nav-link" href="authentication/profile" @onclick="ToggleNavMenu">
                            <i class="fa-solid fa-user-edit" style="width: 2rem;" aria-hidden="true"></i><p class="@NavMenuCssClass list-item-text p-0 m-0"> @context.User.Identity?.Name</p>
                        </NavLink>
                        <NavLink class="nav-link" @onclick="BeginLogOut" style="cursor:pointer">
                            <i class="fa-solid fa-right-from-bracket" style="width: 2rem;" aria-hidden="true"></i><p class="@NavMenuCssClass list-item-text p-0 m-0"> Log out</p>
                        </NavLink>
                    </Authorized>
                </AuthorizeView>
            </div>
        </nav>
    </div>
</div>

@code {
    private bool IsWideScreen;
    private string userId;

    private bool MediaQueryMatch(string mediaQueryString)
    {
        return ((MarkupString)$"<style>@media {mediaQueryString} {{#__media-query-match{{}}</style>")
            .ToString()
            .Contains("#__media-query-match");
    }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : "@NavMenuCssClass";

    private void ToggleNavMenu()
    {
        IsWideScreen = MediaQueryMatch("(min-width: 641px)");
        if (IsWideScreen) {return;}
        collapseNavMenu = !collapseNavMenu;
    }

    private void AlwaysToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void BeginLogOut()
    {
        Navigation.NavigateToLogout("authentication/logout");
        ToggleNavMenu();
    }

    private List<QuizModel> quizModels = new List<QuizModel>();
    private bool isAuthenticated;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public class UserInfo
    {
        public string sub { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        isAuthenticated = authState.User.Identity.IsAuthenticated;

        if (isAuthenticated)
        {
            var response = await httpClient.GetAsync("connect/userinfo");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                Console.WriteLine("JSON Response: " + json);

                var userInfo = JsonConvert.DeserializeObject<UserInfo>(json);

                if (userInfo != null && userInfo.sub != null)
                {
                    //Console.WriteLine("User Info: " + userInfo + userInfo.sub);
                    userId = userInfo.sub;
                }
            }
        }
    }
}
