@using QuizApp.Client.Shared.Models

@inject HttpClient httpClient

<div class="w-25 card card-container text-light justify-content-between flex-grow-1">
    @if (quizTemplate) {
        <div class="hero-image-container w-100 align-items-center">
            <img
            src="https://picsum.photos/200/200"
            class="w-100 hero-image rounded" />
        </div>
    }
    @if (quizModel.Media != null && !string.IsNullOrEmpty(quizModel.Media.Path) &&
    !string.IsNullOrEmpty(quizModel.Media.ContentType))
    {
        <a href="/quiz/@quizModel.Id" class="hero-image-container w-100 align-items-center">
            @if (quizModel.Media.ContentType.Contains("image"))
            {
                <img src="@quizModel.Media.Path" class="w-100 hero-image rounded"/>
            }
            @if (quizModel.Media.ContentType.Contains("video"))
            {
                <VidazorVideo class="w-100 hero-image rounded mb-0"
                    type="@quizModel.Media.ContentType">
                    <source src="@quizModel.Media.Path" controls="false" muted="true">
                </VidazorVideo>
            }
        </a>
    }
    @if (quizTemplate) {
    <div class="main-content shadow p-2">
        <h1 class="pb-2 m-0 border-bottom border-secondary">Title</h1>
        <div class="d-flex flex-row flex-wrap justify-content-between align-items-center py-2 gap-1">
            <div class="d-flex flex-grow align-items-center align-text-center card-attribute">
                <i class="fa-solid fa-star"/>
                <p class="text-light"> 420</p>
            </div>
            <div class="d-flex flex-grow align-items-center align-text-center card-attribute">
                <i class="fa-solid fa-clock"/>
                <p class="text-light"> 69 days ago</p>
            </div>
            <div class="d-flex flex-grow align-items-center align-text-center card-attribute">
                <i class="fa-solid fa-arrow-rotate-left"></i>
                <p class="text-light"> Played: Never</p>
            </div>
        </div>
        <div class="d-flex flex-row card-attribute border-top border-secondary pt-2 gap-2">
            <i class="fa-solid fa-user"></i><p class="text-light"> Quiz by <span><a class="text-decoration-none" href="#">AI</a></span></p>
        </div>
    </div>
    } else {
    <div class="main-content shadow p-2">
        <h1 class="pb-2 m-0">@quizModel.Title</h1>
        <div class="d-flex flex-row flex-wrap justify-content-between align-items-center py-2 gap-1
                    border border-secondary rounded stats">
            <div class="d-flex flex-grow align-items-center align-text-center card-attribute">
                <i class="fa-solid fa-star"/>
                <p class="text-light"> @quizModel.MaxScore</p>
            </div>
            <div class="d-flex flex-grow align-items-center align-text-center card-attribute">
                <i class="fa-solid fa-clock"/>
                <p class="text-light">@GetRelativeTime(quizModel.DateCreated)</p>
            </div>
            <div class="d-flex flex-grow align-items-center align-text-center card-attribute">
                <i class="fa-solid fa-arrow-rotate-left"></i>
                <p class="text-light"> Played: @quizModel.GamesPlayed</p>
            </div>
        </div>
        <div class="d-flex flex-row flex-wrap justify-content-between align-items-center py-2 gap-1">
            <div class="d-flex flex-grow align-items-center align-text-center card-attribute">
                <i class="fa-solid fa-user"></i>
                <p class="text-light"> Quiz by <span>
                    <a class="text-decoration-none" href="@("userQuiz/" + quizModel.UserId)">@quizModel.UserName</a>
                    </span>
                </p>
            </div>
        </div>
    </div>
    }
</div>

@code {
    [Parameter]
    public bool quizTemplate { get; set; }
    [Parameter]
    public int? quizId { get; set; }
    private QuizModel quizModel = new QuizModel();

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetAsync($"api/quiz/getquiz/{quizId}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            quizModel = JsonConvert.DeserializeObject<QuizModel>(content);
        }
        else
        {
            Console.WriteLine("Could not get a response" + response);
        }
    }

    public string GetRelativeTime(DateTime dateCreated)
    {
        const int SECOND = 1;
        const int MINUTE = 60 * SECOND;
        const int HOUR = 60 * MINUTE;
        const int DAY = 24 * HOUR;
        const int MONTH = 30 * DAY;

        var ts = new TimeSpan(DateTime.UtcNow.Ticks - dateCreated.Ticks);
        double delta = Math.Abs(ts.TotalSeconds);

        if (delta < 1 * MINUTE)
            return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";

        if (delta < 2 * MINUTE)
            return "a minute ago";

        if (delta < 45 * MINUTE)
            return ts.Minutes + " minutes ago";

        if (delta < 90 * MINUTE)
            return "an hour ago";

        if (delta < 24 * HOUR)
            return ts.Hours + " hours ago";

        if (delta < 48 * HOUR)
            return "yesterday";

        if (delta < 30 * DAY)
            return ts.Days + " days ago";

        if (delta < 12 * MONTH)
        {
            int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));
            return months <= 1 ? "one month ago" : months + " months ago";
        }
        else
        {
            int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));
            return years <= 1 ? "one year ago" : years + " years ago";
        }
    }
}
