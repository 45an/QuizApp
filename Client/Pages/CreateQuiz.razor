@page "/createQuiz"

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h1>Create Quiz</h1>
<hr />

@if (!string.IsNullOrEmpty(ErrorText))
{
    <div class="alert alert-danger" role="alert">
        @ErrorText
    </div>
}

@* <div class="container">
    <form id="quiz-form" @onsubmit="CreateQuizPost">
        <div class="col-md-6 w-100">
            <div class="form-group">
                <input type="text" class="form-control" placeholder="Quiz Title" @bind="Quiz.Title" required>
            </div>
        </div>
        <br />
        @foreach (var question in Quiz.Questions)
        {
            <div class="question d-flex flex-column">
                <h2 class="p-2 mb-0">Question @(question.Index + 1)</h2>
                <div class="d-flex flex-row flex-wrap flex-grow-1 m-0 p-2 gap-2">
                    <div class="d-flex flex-column w-55 gap-1 flex-grow-1">
                        <div class="flex-grow">
                            <div class="form-group">
                                <input type="text" class="form-control" placeholder="Question" @bind="question.Question" required>
                            </div>
                        </div>
                        <div class="flex-grow">
                            <div class="form-group">
                                <input type="text" class="form-control" placeholder="Answer" @bind="question.Answer" required>
                            </div>
                        </div>
                    </div>
                    <div class="form-group d-flex flex-wrap w-35 flex-grow-1">
                        <FileDropZone class="drop-zone w-100">
                            <InputFile class="form-control" id=@($"media{question.Index}") OnChange="@(async (InputFileChangeEventArgs args) => await OnInputFileChange(args, question.Index))" accept=".jpg,.jpeg,.png,.gif,.mp4,.mov" maxfilesize="134217728" />
                        </FileDropZone>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(question.ImageUrl) && !string.IsNullOrEmpty(question.ContentType))
                {
                    <div class="position-relative w-auto text-center border-dark border-4 p-1">
                        @if (question.ContentType.Contains("image"))
                        {
                            <img src="@question.ImageUrl" class="w-100" style="max-width:inherit;" />
                        }
                        @if (question.ContentType.Contains("video"))
                        {
                            <VidazorVideo controls class="img-fluid w100" style="max-width:inherit;" type="@question.ContentType">
                                <source src="@question.ImageUrl" class="w-100">
                            </VidazorVideo>
                        }
                        <button type="button" class="btn btn-secondary position-absolute top-0 end-0 invisible hover" @onclick="() => RemoveImage(question)">X</button>
                    </div>
                }
            </div>
            <br />
        }
        <button type="button" class="btn btn-primary" @onclick="AddQuestion">Add Another Question</button>
        <button type="button" class="btn btn-danger" @onclick="RemoveQuestion">Remove Question</button>
        <hr />
        <button type="submit" class="btn btn-success">Create Quiz</button>
    </form>
</div> *@

<div class="container">
    <form id="quiz-form" @onsubmit="CreateQuizPost">
        <div class="carousel-container">
            <div id="QuizFormCarousel" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @foreach (var question in Quiz.Questions)
                    {
                        <div class="carousel-item @(question.Index == 0 ? "active" : "") question-@(question.Index)">
                            <div class="question d-flex flex-column">
                                <h2 class="p-2 mb-0">Question @(question.Index + 1)</h2>
                                <div class="d-flex flex-row flex-wrap flex-grow-1 m-0 p-2 gap-2">
                                    <div class="d-flex flex-column w-55 gap-1 flex-grow-1">
                                        <div class="flex-grow">
                                            <div class="form-group">
                                                <input type="text" class="form-control" placeholder="Question" @bind="question.Question" required>
                                            </div>
                                        </div>
                                        <div class="flex-grow">
                                            <div class="form-group">
                                                <input type="text" class="form-control" placeholder="Answer" @bind="question.Answer" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group d-flex flex-wrap w-35 flex-grow-1">
                                        <FileDropZone class="drop-zone w-100">
                                            <InputFile class="form-control" id=@($"media{question.Index}") OnChange="@(async (InputFileChangeEventArgs args) => await OnInputFileChange(args, question.Index))" accept=".jpg,.jpeg,.png,.gif,.mp4,.mov" maxfilesize="134217728" />
                                        </FileDropZone>
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(question.ImageUrl) && !string.IsNullOrEmpty(question.ContentType))
                                {
                                    <div class="position-relative w-auto text-center border-dark border-4 p-1">
                                        @if (question.ContentType.Contains("image"))
                                        {
                                            <img src="@question.ImageUrl" class="w-100" style="max-width:inherit;" />
                                        }
                                        @if (question.ContentType.Contains("video"))
                                        {
                                            <VidazorVideo controls class="img-fluid w100" style="max-width:inherit;" type="@question.ContentType">
                                                <source src="@question.ImageUrl" class="w-100">
                                            </VidazorVideo>
                                        }
                                        <button type="button" class="btn btn-secondary position-absolute top-0 end-0 invisible hover" @onclick="() => RemoveImage(question)">X</button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="d-flex flex-row gap-2 p-4">
            <button class="bg-black d-flex" type="button" data-bs-target="#QuizFormCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <ol class="carousel-indicators  border-1 border-black position-relative bg-black list-unstyled m-0 p-1 flex-grow-1">
                @foreach (var question in Quiz.Questions)
                {
                    <li data-bs-target="#QuizFormCarousel" data-bs-slide-to="@question.Index" class="w-3 h-1 m-0 p-1 @(question.Index == 0 ? "active" : "")"></li>
                }
            </ol>
            <button class="bg-black d-flex" type="button" data-bs-target="#QuizFormCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>

        <br />

        <button type="button" class="btn btn-primary" @onclick="AddQuestion">Add Another Question</button>
        <button type="button" class="btn btn-danger" @onclick="RemoveQuestion">Remove Question</button>
        <hr />
        <button type="submit" class="btn btn-success">Create Quiz</button>
    </form>
</div>

@code {
    class QuizQuestion
    {
        public int Index { get; set; }
        public string Question { get; set; }
        public string Answer { get; set; }
        public string ImageUrl { get; set; }
        public IBrowserFile File { get; set; }
        public string ContentType { get; set; }
    }

    class QuizModel
    {
        public string Title { get; set; }
        public List<QuizQuestion> Questions { get; set; } = new List<QuizQuestion>();
    }

    QuizModel Quiz = new QuizModel() { Questions = { new QuizQuestion { Index = 0 } } }; // Start with one blank question
    string ErrorText = null;

    private void AddQuestion()
    {
        if (Quiz.Questions.Count < 13)
            Quiz.Questions.Add(new QuizQuestion { Index = Quiz.Questions.Count });
    }

    private void RemoveQuestion()
    {
        if (Quiz.Questions.Count > 1)
            Quiz.Questions.RemoveAt(Quiz.Questions.Count - 1);
    }

    private void RemoveImage(QuizQuestion question)
    {
        question.ImageUrl = null;
        question.File = null;
    }

    private async Task CreateQuizPost()
    {
        try
        {
            var formData = new MultipartFormDataContent();
            formData.Add(new StringContent(Quiz.Title), "Title");

            foreach (var question in Quiz.Questions)
            {
                if (question.File != null)
                {
                    formData.Add(new StringContent(question.Question), $"Questions[{question.Index}].Question");
                    formData.Add(new StringContent(question.Answer), $"Questions[{question.Index}].Answer");
                    formData.Add(new StreamContent(question.File.OpenReadStream()), $"Questions[{question.Index}].Media", question.File.Name);
                }
            }

            var response = await httpClient.PostAsync("/api/Quiz/addquiz", formData);
            response.EnsureSuccessStatusCode();

            // Handle success response
            // For example, you can redirect to another page
        }
        catch (Exception ex)
        {
            ErrorText = ex.Message;
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e, int questionIndex)
    {
        var question = Quiz.Questions.FirstOrDefault(q => q.Index == questionIndex);
        if (question == null)
            return;

        var file = e.File;
        question.File = file;
        ErrorText = null;

        // Check file size
        int maxMb = 13;
        long megaByte = 1024 * 1024;
        long maxAllowedSizeInBytes = maxMb * megaByte;
        long fileSize = file.Size;
        if (fileSize > maxAllowedSizeInBytes)
        {
            // Format the file size with one decimal place
            double fileSizeInMb = (double)fileSize / megaByte;
            string fileSizeFormatted = fileSizeInMb.ToString("0.0");

            this.ErrorText = $"Supplied file with size {fileSizeFormatted} MB exceeds the maximum of {maxMb} megabytes.";
            Console.WriteLine(this.ErrorText);
            return;
        }

        // Check file type
        string[] permittedFileTypes = { ".jpg", ".jpeg", ".png", ".gif", ".mp4", ".mov" };
        var extension = Path.GetExtension(file.Name)?.ToLowerInvariant();
        if (string.IsNullOrEmpty(extension) || !permittedFileTypes.Contains(extension))
        {
            this.ErrorText = $"Invalid file type. Permitted files are:\n{string.Join("\n", permittedFileTypes)}";
            Console.WriteLine(this.ErrorText);
            return;
        }

        try
        {
            // Create form data
            var formData = new MultipartFormDataContent();
            var streamContent = new StreamContent(file.OpenReadStream(maxAllowedSizeInBytes));
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType); // Set content type
            formData.Add(streamContent, "file", file.Name);

            // Make POST request to MediaController
            var response = await httpClient.PostAsync("/api/Media/addMedia", formData);
            response.EnsureSuccessStatusCode();

            // Handle success response
            var json = await response.Content.ReadAsStringAsync();
            Console.WriteLine("JSON Response: " + json);

            dynamic media = JObject.Parse(json);
            if (media != null && media.path != null)
            {
                Console.WriteLine("questionIndex: " + questionIndex);
                string path = media.path;
                string contentType = media.contentType;

                // Add or update the URL in the dictionary
                question.ImageUrl = path;
                question.ContentType = contentType;
            }
            else
            {
                ErrorText = "Failed to deserialize JSON or missing image path.";
            }
        }
        catch (Exception ex)
        {
            ErrorText = ex.Message;
            Console.WriteLine("Exception: " + ex.Message);
        }
    }
}
