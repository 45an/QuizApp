@page "/createQuiz"

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using QuizApp.Client.Shared.Models

@inject IAccessTokenProvider AccessTokenProvider
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Create Quiz</PageTitle>

<AuthorizeView>
    <Authorized>
        <header class="navbar w-100 mb-4 p-0 border-bottom border-2 border-secondary text-light">
            @if (Quiz.Title != null && Quiz.Title.Length > 0)
            {
                <h2><strong>Create A New Quiz - @Quiz.Title</strong></h2>
            }
            else
            {
                <h2><strong>Create A New Quiz</strong></h2>
            }
        </header>

        <div>
            @if (!string.IsNullOrEmpty(ErrorText))
            {
                <div class="alert alert-danger" role="alert">
                    <div class="mb-0 d-flex flex-row justify-content-between align-items-center">
                        @ErrorText
                        <span>
                            <button type="button" class="btn btn-danger" @onclick="ClearError"><i class="fa-solid fa-trash"></i></button>
                        </span>
                    </div>
                </div>
            }

            <form id="quiz-form" class="d-flex flex-column gap-4" @onsubmit="CreateQuizPost">
                @* Quiz Title/Image *@
                <div class="question d-flex flex-column card-container">
                        <div class="d-flex flex-column flex-wrap flex-grow-1 m-0 p-3 gap-2">
                        <input type="text" class="form-control p-2" placeholder="Quiz Title" @bind="Quiz.Title" required>
                        @if (Quiz.Media == null)
                        {
                            @* Quiz Media Upload *@
                            <div class="form-group d-flex flex-wrap flex-grow-1 w-100">
                                <FileDropZone class="drop-zone w-100 m-0 p-3">
                                    <InputFile name="file" class="text-light w-100" id=@($"mediaQuiz{Quiz.Index}")
                                        OnChange="@(async (InputFileChangeEventArgs args) => await OnInputFileChangeQuiz(args, Quiz.Index))"
                                        accept=".jpg,.jpeg,.png,.gif,.mp4,.mov" maxfilesize="134217728" />
                                </FileDropZone>
                            </div>
                        }
                    </div>
                    @* Quiz Media *@
                    @if (Quiz.Media != null && !string.IsNullOrEmpty(Quiz.Media.Path) &&
                    !string.IsNullOrEmpty(Quiz.Media.ContentType))
                    {
                        <FileDropZone class="drop-zone w-100 m-0 p-1 m-2">
                            <div class="image-container">
                                @if (Quiz.Media.ContentType.Contains("image"))
                                {
                                    <img src="@Quiz.Media.Path" class="w-100 image rounded" style="max-width:inherit;" />
                                }
                                @if (Quiz.Media.ContentType.Contains("video"))
                                {
                                    <VidazorVideo controls class="img-fluid w-100 image rounded" style="max-width:inherit;"
                                        type="@Quiz.Media.ContentType">
                                        <source src="@Quiz.Media.Path" class="">
                                    </VidazorVideo>
                                }
                                <button type="button" class="btn btn-secondary rounded-0 position-absolute top-0 end-0"
                                    @onclick="() => RemoveMedia(Quiz.Media)"><i class="fa-solid fa-trash"></i></button>
                            </div>
                            <InputFile name="file" class="text-light w-100 d-none" id=@($"mediaQuiz{Quiz.Index}")
                                OnChange="@(async (InputFileChangeEventArgs args) => await OnInputFileChangeQuiz(args, Quiz.Index))"
                                accept=".jpg,.jpeg,.png,.gif,.mp4,.mov" maxfilesize="134217728" />
                        </FileDropZone>
                    }
                </div>

                @* Question Loop *@
                @foreach (var question in Quiz.Questions)
                {
                    @* Header and Multiple Choice Switcher*@
                    <div class="question d-flex flex-column card-container">
                        <div class="d-flex flex-column flex-wrap flex-grow-1 m-0 p-3 gap-2">
                            <div class="mb-0 d-flex justify-content-between align-items-center text-light pb-3">
                                <div class="d-flex flex-row flex-wrap gap-2 align-items-center">
                                    <h2 class="m-0 pe-2">Question @(question.Index + 1)</h2>
                                    <div class="form-check form-switch d-flex flex-row flex-grow-2 m-0 ps-0 pe-4 gap-2 justify-content-start align-items-center">
                                        <input class="form-check-input m-0 card-container border-secondary" type="checkbox" id=@($"multipleChoice{question.Index}")
                                            @bind="@question.MultipleChoice" />
                                        <label class="form-check-label" for=@($"multipleChoice{question.Index}")>Multiple Choice</label>
                                    </div>
                                </div>
                                <div class="flex-grow-2">
                                    <span>
                                        <button type="button" class="btn btn-danger"
                                            @onclick="() => RemoveQuestion(question)"><i class="fa-solid fa-trash"></i></button>
                                    </span>
                                </div>
                            </div>


                        @if (question.MultipleChoice)
                        {
                            @if (question.MocksAnswers != null)
                            {
                                @* Multiple Choice Questions *@
                                <div class="d-flex flex-row w-100 gap-1 flex-grow-1">
                                    <div class="flex-grow w-100">
                                        <div class="form-group">
                                            <input type="text" class="form-control" placeholder="Question"
                                                @bind="question.Questions" required>
                                        </div>
                                    </div>
                                    <div class="flex-grow w-100">
                                        <div class="form-group">
                                            <select class="form-select" @bind="question.Answer" required>
                                                <option value="">Select Correct Answer</option>
                                                @foreach (var mock in question.MocksAnswers)
                                                {
                                                    if (mock.MockAnswer != "")
                                                    {
                                                        <option value="@mock.MockAnswer">@mock.MockAnswer</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                @* Multiple Choice Answers *@
                                <div class="d-flex flex-row w-100 flex-grow-1 gap-1 flex-wrap">
                                    @foreach (var mock in question.MocksAnswers)
                                    {
                                        <div class="flex-grow-1 w-45">
                                            <div class="form-group">
                                                <input type="text" class="form-control" placeholder="Mock Answer"
                                                    @bind="mock.MockAnswer" required>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            @* Multiple Choice Buttons *@
                            <button type="button" class="btn btn-primary" @onclick="() => AddMockAnswer(question)">Add
                                Multiple Choice Answer</button>
                            <button type="button" class="btn btn-danger" @onclick="() => RemoveMockAnswer(question)">Remove
                                Multiple Choice Answer</button>

                            @* Multiple Choice Media Upload *@
                            @if (question.Media == null)
                            {
                                <div class="form-group d-flex flex-wrap flex-grow-1 w-100">
                                    <FileDropZone class="drop-zone w-100 m-0 p-3">
                                        <InputFile name="file" class="text-light w-100" id=@($"mediaQuestion{question.Index}")
                                            OnChange="@(async (InputFileChangeEventArgs args) => await OnInputFileChangeQuestion(args, question.Index))"
                                            accept=".jpg,.jpeg,.png,.gif,.mp4,.mov" maxfilesize="134217728" />
                                    </FileDropZone>
                                </div>
                            }
                        }
                        else
                        {
                            @* Normal Question Form *@
                            <div class="d-flex flex-row w-100 gap-1 flex-grow-1">
                                <div class="flex-grow w-100">
                                    <div class="form-group">
                                        <input type="text" class="form-control" placeholder="Question"
                                            @bind="question.Questions" required>
                                    </div>
                                </div>
                                <div class="flex-grow w-100">
                                    <div class="form-group">
                                        <input type="text" class="form-control" placeholder="Answer" @bind="question.Answer"
                                            required>
                                    </div>
                                </div>
                            </div>

                            @* Normal Question Form Media Upload *@
                            @if (question.Media == null)
                            {
                                <div class="form-group d-flex flex-wrap flex-grow-1 w-100">
                                    <FileDropZone class="drop-zone w-100 m-0 p-3">
                                        <InputFile name="file" class="text-light w-100" id=@($"mediaQuestion{question.Index}")
                                            OnChange="@(async (InputFileChangeEventArgs args) => await OnInputFileChangeQuestion(args, Quiz.Index))"
                                            accept=".jpg,.jpeg,.png,.gif,.mp4,.mov" maxfilesize="134217728" />
                                    </FileDropZone>
                                </div>
                            }
                        }
                        </div>
                        @* Normal Question Media *@
                        @if (question.Media != null && !string.IsNullOrEmpty(question.Media.Path) &&
                        !string.IsNullOrEmpty(question.Media.ContentType))
                        {
                            <FileDropZone class="drop-zone w-100 m-0 p-1 m-2">
                                <div class="image-container w-100 align-items-center">
                                    @if (question.Media.ContentType.Contains("image"))
                                    {
                                        <img src="@question.Media.Path" class="image rounded" style="max-width:inherit;" />
                                    }
                                    @if (question.Media.ContentType.Contains("video"))
                                    {
                                        <VidazorVideo controls class="image rounded" style="max-width:inherit;"
                                            type="@question.Media.ContentType">
                                            <source src="@question.Media.Path" class="">
                                        </VidazorVideo>
                                    }
                                    <button type="button" class="btn btn-secondary rounded-0 position-absolute top-0 end-0"
                                        @onclick="() => RemoveMedia(question.Media)"><i class="fa-solid fa-trash"></i></button>
                                </div>
                                <InputFile name="file" class="text-light w-100 d-none" id=@($"mediaQuestion{question.Index}")
                                    OnChange="@(async (InputFileChangeEventArgs args) => await OnInputFileChangeQuestion(args, question.Index))"
                                    accept=".jpg,.jpeg,.png,.gif,.mp4,.mov" maxfilesize="134217728" />
                            </FileDropZone>
                        }
                    </div>
                }
                @* Add/Upload Buttons *@
                <div class="d-flex flex-column gap-2">
                    <button type="button" class="btn btn-primary" @onclick="AddQuestion">Add Another Question</button>
                    @* <button type="button" class="btn btn-danger" @onclick="RemoveQuestion">Remove Question</button>
                    *@
                    <button type="submit" class="btn btn-success">Create Quiz</button>
                </div>
            </form>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning text-light card-container" role="alert">
            <p>You need to be authenticated to access this page.</p>
            <p>Please <a
                    href="/Identity/Account/Login?ReturnUrl=%2Fconnect%2Fauthorize%2Fcallback%3Fclient_id%3DQuizApp.Client%26redirect_uri%3Dhttps%253A%252F%252Flocalhost%253A7086%252Fauthentication%252Flogin-callback%26response_type%3Dcode%26scope%3DQuizApp.ServerAPI%2520openid%2520profile%26state%3De2b332ba6bdf48299cb8a128fb890032%26code_challenge%3DfySN4TgaMpR3Vt9eiDfEhu-aIlV0CFM7C2ymsILeDEg%26code_challenge_method%3DS256%26response_mode%3Dquery">log
                    in</a> to continue.</p>
            <p>If you don't have an account, you can <a
                    href="/Identity/Account/Register?returnUrl=%2Fauthentication%2Flogin">register</a> for one.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    // Initialize Quiz
    QuizModel Quiz = new QuizModel()
    {
        Index = 0,
        Questions =
        {
            new QuestionModel { Index = 0, MultipleChoice = false, }
        }
    };

    string ErrorText = null;

    private void ClearError()
    {
        ErrorText = "";
    }

    private void AddQuestion()
    {
        if (Quiz.Questions.Count < 13)
            Quiz.Questions.Add(new QuestionModel { Index = Quiz.Questions.Count });
    }

    private void RemoveQuestion(QuestionModel question)
    {
        if (Quiz.Questions.Count == 1)
        {
            question.Answer = null;
            question.Questions = null;
            question.Media = null;
            return;
        }
        if (question != null && Quiz.Questions.Contains(question))
        {
            int removedIndex = question.Index;
            Quiz.Questions.RemoveAt(removedIndex); // Remove the question

            // Update indexes of subsequent questions
            for (int i = removedIndex; i < Quiz.Questions.Count; i++)
            {
                Quiz.Questions[i].Index = i;
            }
        }
    }

    private void AddMockAnswer(QuestionModel question)
    {
        if (question.MocksAnswers == null)
        {
            question.MocksAnswers = new List<MockModel>();
        }

        if (question.MocksAnswers.Count < 4) // Check if the maximum limit is reached
        {
            question.MocksAnswers.Add(new MockModel { MockAnswer = "" }); // Add an empty mock answer
        }
    }

    private void RemoveMockAnswer(QuestionModel question)
    {
        if (question.MocksAnswers != null && question.MocksAnswers.Count > 2)
        {
            var copyOfMocks = new List<MockModel>(question.MocksAnswers);
            copyOfMocks.RemoveAt(copyOfMocks.Count - 1);
            question.MocksAnswers = copyOfMocks;
        }
    }

    private void RemoveMedia(MediaModel media)
    {
        // Check if the media belongs to any question
        foreach (var question in Quiz.Questions)
        {
            if (question.Media == media)
            {
                question.Media = null; // Clear media from the question
                return;
            }
        }

        // Check if the media belongs to the quiz itself
        if (Quiz.Media == media)
        {
            Quiz.Media = null; // Clear media from the quiz
        }
    }

    private async Task CreateQuizPost()
    {
        // Check file size
        int maxMb = 13;
        long megaByte = 1024 * 1024;
        long maxAllowedSizeInBytes = maxMb * megaByte;
        long fileSize = Quiz.File.Size;

        try
        {
            // Check if the quiz or quiz media is null
            if (Quiz == null || Quiz.Media == null || Quiz.Media.Hash == null)
            {
                ErrorText = "Quiz or quiz media is null.";
                return;
            }

            List<int> questionsWithoutMedia = new List<int>();

            foreach (var question in Quiz.Questions)
            {
                if (question.Media == null)
                {
                    questionsWithoutMedia.Add(question.Index + 1);
                }
            }

            if (questionsWithoutMedia.Count > 0)
            {
                ErrorText = "No media attached for questions: ";
                foreach (int index in questionsWithoutMedia)
                {
                    ErrorText += $"{index}, ";
                }
                ErrorText = ErrorText.TrimEnd(',', ' ') + ".\n";
                return;
            }

            if (fileSize > maxAllowedSizeInBytes)
            {
                // Format the file size with one decimal place
                double fileSizeInMb = (double)fileSize / megaByte;
                string fileSizeFormatted = fileSizeInMb.ToString("0.0");

                ErrorText = $"Supplied file with size {fileSizeFormatted} MB exceeds the maximum of {maxMb} megabytes.";
                Console.WriteLine(ErrorText);
                return;
            }

            // Check file type
            string[] permittedFileTypes = { ".jpg", ".jpeg", ".png", ".gif", ".mp4", ".mov" };
            var extension = Path.GetExtension(Quiz.Media.Path)?.ToLowerInvariant();
            if (string.IsNullOrEmpty(extension) || !permittedFileTypes.Contains(extension))
            {
                ErrorText = $"Invalid file type. Permitted files are:\n{string.Join("\n", permittedFileTypes)}";
                Console.WriteLine("Not a Permitted File Type: " + ErrorText);
                return;
            }

            var jsonContent = JsonConvert.SerializeObject(Quiz);
            var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");

            var response = await httpClient.PostAsync("/api/Quiz/addquiz", content);
            response.EnsureSuccessStatusCode();

            // Handle success response
            // TODO: redirect to quiz page
        }
        catch (Exception ex)
        {
            ErrorText = ex.Message;
            Console.WriteLine("Exception: " + ex.Message);
        }
    }

    private async Task OnInputFileChangeQuestion(InputFileChangeEventArgs e, int index)
    {
        try
        {
            var question = Quiz.Questions.FirstOrDefault(q => q.Index == index);
            if (question == null)
                return;

            if (e.File != null)
            {
                var file = e.File;
                question.File = file;

                var media = await HandleFileUpload(file);
                if (media != null)
                {
                    question.Media = media;
                }
                //Console.WriteLine("Question Media: " + media.Path);
            }
        }
        catch (Exception ex)
        {
            ErrorText = ex.Message;
            Console.WriteLine("Exception: " + ex.Message);
        }
    }

    private async Task OnInputFileChangeQuiz(InputFileChangeEventArgs e, int index)
    {
        try
        {
            if (e.File != null)
            {
                var file = e.File;
                Quiz.File = file;

                var media = await HandleFileUpload(file);
                if (media != null)
                {
                    Quiz.Media = media;
                    Console.WriteLine("Quiz Media: " + media.Path);
                }
            }
        }
        catch (Exception ex)
        {
            ErrorText = ex.Message;
            Console.WriteLine("Exception: " + ex.Message);
        }
    }

    private async Task<MediaModel> HandleFileUpload(IBrowserFile file)
    {
        ErrorText = null;

        // Check file size
        int maxMb = 13;
        long megaByte = 1024 * 1024;
        long maxAllowedSizeInBytes = maxMb * megaByte;
        long fileSize = file.Size;
        if (fileSize > maxAllowedSizeInBytes)
        {
            // Format the file size with one decimal place
            double fileSizeInMb = (double)fileSize / megaByte;
            string fileSizeFormatted = fileSizeInMb.ToString("0.0");

            this.ErrorText = $"Supplied file with size {fileSizeFormatted} MB exceeds the maximum of {maxMb} megabytes.";
            Console.WriteLine(this.ErrorText);
            return null;
        }

        // Check file type
        string[] permittedFileTypes = { ".jpg", ".jpeg", ".png", ".gif", ".mp4", ".mov" };
        var extension = Path.GetExtension(file.Name)?.ToLowerInvariant();
        if (string.IsNullOrEmpty(extension) || !permittedFileTypes.Contains(extension))
        {
            this.ErrorText = $"Invalid file type. Permitted files are:\n{string.Join("\n", permittedFileTypes)}";
            Console.WriteLine(this.ErrorText);
            return null;
        }

        try
        {
            // Create form data
            var formData = new MultipartFormDataContent();
            var streamContent = new StreamContent(file.OpenReadStream(maxAllowedSizeInBytes));
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType); // Set content type
            formData.Add(streamContent, "file", file.Name);

            // Make POST request to MediaController
            var response = await httpClient.PostAsync("/api/Media/addMedia", formData);
            response.EnsureSuccessStatusCode();

            // Handle success response
            var json = await response.Content.ReadAsStringAsync();
            Console.WriteLine("JSON Response: " + json);

            var media = JsonConvert.DeserializeObject<MediaModel>(json);
            return media;
        }
        catch (Exception ex)
        {
            ErrorText = ex.Message;
            Console.WriteLine("Exception: " + ex.Message);
            return null;
        }
    }
}
