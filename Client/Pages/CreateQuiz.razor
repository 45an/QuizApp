@page "/createQuiz"

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@if (Quiz.Title != null && Quiz.Title.Length > 0) {
    <h1>Create Quiz - @Quiz.Title</h1>
} else {
    <h1>Create Quiz</h1>
}
<hr />

@if (!string.IsNullOrEmpty(ErrorText))
{
    <div class="alert alert-danger" role="alert">
        @ErrorText
    </div>
}

<div class="container">
    <form id="quiz-form" @onsubmit="CreateQuizPost">
        <div class="col-md-6 w-100">
            <div class="form-group">
                <input type="text" class="form-control" placeholder="Quiz Title" @bind="Quiz.Title" required>
            </div>
        </div>
        <br />
        @foreach (var question in Quiz.Questions)
        {
            <div class="question d-flex flex-column">
                <h2 class="p-2 mb-0">Question @(question.Index + 1)</h2>

                <div class="form-check form-switch d-flex flex-row m-0 p-2 gap-2 justify-content-start align-items-center">
                    <input class="form-check-input m-0" type="checkbox" id=@($"multipleChoice{question.Index}") @bind="@question.MultipleChoice" />
                    <label class="form-check-label" for=@($"multipleChoice{question.Index}")>Multiple Choice</label>
                </div>

                @if (question.MultipleChoice)
                {
                    <div class="d-flex flex-column flex-wrap flex-grow-1 m-0 p-2 gap-2">
                        @if (question.MocksAnswers != null)
                        {
                            <div class="d-flex flex-row w-100 gap-1 flex-grow-1">
                                <div class="flex-grow w-100">
                                    <div class="form-group">
                                        <input type="text" class="form-control" placeholder="Question" @bind="question.Questions" required>
                                    </div>
                                </div>
                                <div class="flex-grow w-100">
                                    <div class="form-group">
                                        <select class="form-select" @bind="question.Answer" required>
                                            <option value="">Select Correct Answer</option>
                                            @foreach (var mock in question.MocksAnswers)
                                            {
                                                if (mock.MockAnswer != "") {
                                                    <option value="@mock.MockAnswer">@mock.MockAnswer</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex flex-row w-100 flex-grow-1 gap-1 flex-wrap">
                                @foreach (var mock in question.MocksAnswers)
                                {
                                    <div class="flex-grow-1 w-45">
                                        <div class="form-group">
                                            <input type="text" class="form-control" placeholder="Mock Answer" @bind="mock.MockAnswer" required>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        <div class="form-group d-flex flex-wrap w-35 flex-grow-1">
                            <FileDropZone class="drop-zone w-100 m-0">
                                <InputFile name="file" class="form-control" id=@($"media{question.Index}") OnChange="@(async (InputFileChangeEventArgs args) => await OnInputFileChange(args, question.Index))" accept=".jpg,.jpeg,.png,.gif,.mp4,.mov" maxfilesize="134217728" />
                            </FileDropZone>
                        </div>

                    <button type="button" class="btn btn-primary" @onclick="() => AddMockAnswer(question)">Add Multiple Choice Answer</button>
                    <button type="button" class="btn btn-danger" @onclick="() => RemoveMockAnswer(question)">Remove Multiple Choice Answer</button>

                    </div>
                } else {
                    <div class="d-flex flex-column flex-wrap flex-grow-1 m-0 p-2 gap-2">
                        <div class="d-flex flex-row w-100 gap-1 flex-grow-1">
                            <div class="flex-grow w-100">
                                <div class="form-group">
                                    <input type="text" class="form-control" placeholder="Question" @bind="question.Questions" required>
                                </div>
                            </div>
                            <div class="flex-grow w-100">
                                <div class="form-group">
                                    <input type="text" class="form-control" placeholder="Answer" @bind="question.Answer" required>
                                </div>
                            </div>
                        </div>
                        <div class="form-group d-flex flex-wrap w-35 flex-grow-1">
                            <FileDropZone class="drop-zone w-100 m-0">
                                <InputFile name="file" class="form-control" id=@($"media{question.Index}") OnChange="@(async (InputFileChangeEventArgs args) => await OnInputFileChange(args, question.Index))" accept=".jpg,.jpeg,.png,.gif,.mp4,.mov" maxfilesize="134217728" />
                            </FileDropZone>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(question.Media.Path) && !string.IsNullOrEmpty(question.Media.ContentType))
                {
                    <div class="position-relative w-auto text-center border-dark border-4 p-2">
                        @if (question.Media.ContentType.Contains("image"))
                        {
                            <img src="@question.Media.Path" class="w-100" style="max-width:inherit;" />
                        }
                        @if (question.Media.ContentType.Contains("video"))
                        {
                            <VidazorVideo controls class="img-fluid w100" style="max-width:inherit;" type="@question.Media.ContentType">
                                <source src="@question.Media.Path" class="w-100">
                            </VidazorVideo>
                        }
                        <button type="button" class="btn btn-secondary position-absolute top-0 end-0 invisible hover" @onclick="() => RemoveImage(question)">X</button>
                    </div>
                }
            </div>
            <br />
        }
        <button type="button" class="btn btn-primary" @onclick="AddQuestion">Add Another Question</button>
        <button type="button" class="btn btn-danger" @onclick="RemoveQuestion">Remove Question</button>
        <hr />
        <button type="submit" class="btn btn-success">Create Quiz</button>
    </form>
</div>

@code {

    class MediaModel
    {
        public Guid? MediaGuid { get; set; }
        public string? Hash { get; set; }
        public string? Path { get; set; }
        public string? ContentType { get; set; }
        public byte[]? FileBytes { get; set; }
    }

    class QuizQuestion
    {
        public int Index { get; set; }
        public string Questions { get; set; }
        public string Answer { get; set; }
        public virtual MediaModel Media { get; set; }
        public IBrowserFile File { get; set; }
        public bool MultipleChoice { get; set; }
        public virtual List<MockModel> MocksAnswers { get; set; }

        public QuizQuestion()
        {
            // Initialize MocksAnswers with two MockModel instances, each with an empty MockAnswer string
            MocksAnswers = new List<MockModel>
            {
                new MockModel { MockAnswer = "" },
                new MockModel { MockAnswer = "" }
            };
            Media = new MediaModel();
        }
    }

    class MockModel {
        public string? MockAnswer { get; set; }
    }

    class QuizModel
    {
        public string Title { get; set; }
        public List<QuizQuestion> Questions { get; set; } = new List<QuizQuestion>();
    }

    // Initialize Quiz
    QuizModel Quiz = new QuizModel()
    {
        Questions =
        {
            new QuizQuestion
            {
                Index = 0,
                MultipleChoice = false,
            }
        }
    };

    string ErrorText = null;

    private void AddQuestion()
    {
        if (Quiz.Questions.Count < 13)
            Quiz.Questions.Add(new QuizQuestion { Index = Quiz.Questions.Count });
    }

    private void RemoveQuestion()
    {
        if (Quiz.Questions.Count > 1)
            Quiz.Questions.RemoveAt(Quiz.Questions.Count - 1);
    }

    private void AddMockAnswer(QuizQuestion question)
    {
        if (question.MocksAnswers == null)
        {
            question.MocksAnswers = new List<MockModel>();
        }

        if (question.MocksAnswers.Count < 4) // Check if the maximum limit is reached
        {
            question.MocksAnswers.Add(new MockModel { MockAnswer =  ""  }); // Add an empty mock answer
        }
    }

    private void RemoveMockAnswer(QuizQuestion question)
    {
        if (question.MocksAnswers != null && question.MocksAnswers.Count > 2)
        {
            question.MocksAnswers.RemoveAt(question.MocksAnswers.Count - 1); // Remove the last mock answer
        }
    }

    private void RemoveImage(QuizQuestion question)
    {
        question.Media.Path = null;
        question.File = null;
    }

    private async Task CreateQuizPost()
    {
        // Check file size
        int maxMb = 13;
        long megaByte = 1024 * 1024;
        long maxAllowedSizeInBytes = maxMb * megaByte;

        try
        {
            var jsonContent = JsonConvert.SerializeObject(Quiz);
            var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");

            var response = await httpClient.PostAsync("/api/Quiz/addquiz", content);
            response.EnsureSuccessStatusCode();

            // Handle success response
            // TODO: redirect to quiz page
        }
        catch (Exception ex)
        {
            ErrorText = ex.Message;
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e, int questionIndex)
    {
        var question = Quiz.Questions.FirstOrDefault(q => q.Index == questionIndex);
        if (question == null)
            return;

        var file = e.File;
        question.File = file;
        ErrorText = null;

        // Check file size
        int maxMb = 13;
        long megaByte = 1024 * 1024;
        long maxAllowedSizeInBytes = maxMb * megaByte;
        long fileSize = file.Size;
        if (fileSize > maxAllowedSizeInBytes)
        {
            // Format the file size with one decimal place
            double fileSizeInMb = (double)fileSize / megaByte;
            string fileSizeFormatted = fileSizeInMb.ToString("0.0");

            this.ErrorText = $"Supplied file with size {fileSizeFormatted} MB exceeds the maximum of {maxMb} megabytes.";
            Console.WriteLine(this.ErrorText);
            return;
        }

        // Check file type
        string[] permittedFileTypes = { ".jpg", ".jpeg", ".png", ".gif", ".mp4", ".mov" };
        var extension = Path.GetExtension(file.Name)?.ToLowerInvariant();
        if (string.IsNullOrEmpty(extension) || !permittedFileTypes.Contains(extension))
        {
            this.ErrorText = $"Invalid file type. Permitted files are:\n{string.Join("\n", permittedFileTypes)}";
            Console.WriteLine(this.ErrorText);
            return;
        }

        try
        {
            // Create form data
            var formData = new MultipartFormDataContent();
            var streamContent = new StreamContent(file.OpenReadStream(maxAllowedSizeInBytes));
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType); // Set content type
            formData.Add(streamContent, "file", file.Name);

            // Make POST request to MediaController
            var response = await httpClient.PostAsync("/api/Media/addMedia", formData);
            response.EnsureSuccessStatusCode();

            // Handle success response
            var json = await response.Content.ReadAsStringAsync();
            Console.WriteLine("JSON Response: " + json);

            var media = JsonConvert.DeserializeObject<MediaModel>(json);
            if (media != null && media.Path != null)
            {
                question.Media.MediaGuid = media.MediaGuid;
                question.Media.Hash = media.Hash;
                question.Media.Path = media.Path;
                question.Media.ContentType = media.ContentType;
            }
            else
            {
                ErrorText = "Failed to deserialize JSON or missing file path.";
            }
        }
        catch (Exception ex)
        {
            ErrorText = ex.Message;
            Console.WriteLine("Exception: " + ex.Message);
        }
    }
}
