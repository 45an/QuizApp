@page "/quiz/{QuizId:int}"

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using QuizApp.Client.Shared.Models

@inject IAccessTokenProvider AccessTokenProvider
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        <div class="container pb-4 mb-4">
                <div class="card block-container text-light justify-content-between flex-grow-1 mb-4 flex-row">
                    <div class="main-content stats justify-content-between rounded">
                        <div class="d-flex flex-row flex-wrap justify-content-between align-items-center py-2 gap-1
                                    border border-secondary rounded stats">
                            <header class="navbar w-100 mb-4 p-0 border-bottom border-2 border-secondary text-light text-center justify-content-center">
                                <h2><strong>@quizModel.Title</strong></h2>
                            </header>
                            <div class="d-flex flex-grow-1 align-items-center align-text-center card-attribute w-50">
                                <i class="fa-solid fa-star"/>
                                <p class="text-light"> @quizModel.MaxScore</p>
                            </div>
                            <div class="d-flex flex-grow-1 align-items-center align-text-center card-attribute w-50">
                                <i class="fa-solid fa-clock"/>
                                <p class="text-light"> @quizModel.DateCreated.ToShortDateString()</p>
                            </div>
                            <div class="d-flex flex-grow-1 align-items-center align-text-center card-attribute w-50">
                                <i class="fa-solid fa-arrow-rotate-left"></i>
                                <p class="text-light"> Played: @quizModel.GamesPlayed</p>
                            </div>
                        </div>
                        <div class="d-flex flex-row flex-wrap card-attribute py-2 gap-2">
                            <i class"fa-solid fa-user"></i><p class="text-light"> Quiz by <span><a class="text-decoration-none" href="{quizModel.UserId}">@quizModel.UserName</a></span></p>
                        </div>
                    </div>

                    @if (quizModel.Media != null && !string.IsNullOrEmpty(quizModel.Media.Path) &&
                    !string.IsNullOrEmpty(quizModel.Media.ContentType))
                    {
                        <div class="hero-image-container w-100 align-items-center mb-0">
                            @if (quizModel.Media.ContentType.Contains("image"))
                            {
                                <img src="@quizModel.Media.Path" class="w-100 hero-image rounded"/>
                            }
                            @if (quizModel.Media.ContentType.Contains("video"))
                            {
                                <VidazorVideo class="w-100 hero-image rounded mb-0" controls="true" muted="false"
                                    type="@quizModel.Media.ContentType">
                                    <source src="@quizModel.Media.Path">
                                </VidazorVideo>
                            }
                        </div>
                    }
                </div>
            <form>

            @foreach (var question in quizModel.Questions)
            {
                <div class="@("card block-container text-light justify-center flex-grow-1 mb-3 flex-column " + activeQuestionClass(question.Index))">
                    <div class="d-flex flex-row gap-3">
                        <div class="main-content stats justify-content-between rounded">
                            <div class="d-flex flex-row flex-wrap justify-content-between align-items-center py-2 gap-1
                                        border border-secondary rounded stats">
                                <header class="navbar w-100 mb-4 p-0 px-2 border-bottom border-2 border-secondary text-light text-center justify-content-center">
                                    <h3><strong>@question.Questions</strong></h3>
                                </header>
                                @if (question.Time != 0)
                                    {
                                    <div class="d-flex flex-grow-1 align-items-center align-text-center card-attribute w-50">
                                        <i class="fa-solid fa-clock"/>
                                        <p class="text-light">Question has a time limit of @question.Time seconds.</p>
                                    </div>
                                }
                            </div>
                            <div class="main-content flex-row w-100 p-2">
                                @if (question.MultipleChoice)
                                {
                                    <div class="d-flex flex-column w-100 flex-grow-2 gap-1 flex-nowrap justify-contents-center form-group">
                                        @foreach (var mockAnswer in question.MocksAnswers) {
                                            @if (string.IsNullOrEmpty(mockAnswer.MockAnswer))
                                            {
                                                <div class="d-flex flex-grow-1 w-25 form-check align-items-center">
                                                    <input class="form-check-input me-2" type="radio" name="@($"answer-{question.Id}")" id="@($"answer-{question.Id}-{mockAnswer.Id}")">
                                                    <label class="form-check-label text-white" for="@($"answer-{question.Id}-{mockAnswer.Id}")">
                                                        <p class="p-0 m-0">asdwa wdaw dawd awdwad awd</p>
                                                    </label>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="d-flex flex-grow-1 w-25 form-check align-items-center">
                                                    <input class="form-check-input me-2" type="radio" name="@($"answer-{question.Id}")" id="@($"answer-{question.Id}-{mockAnswer.Id}")">
                                                    <label class="form-check-label text-white" for="@($"answer-{question.Id}-{mockAnswer.Id}")">
                                                        <p class="p-0 m-0">@mockAnswer.MockAnswer</p>
                                                    </label>
                                                </div>
                                            }
                                        }
                                    </div>
                                }
                                else
                                {
                                    <input type="text" class="form-control mb-3" placeholder="Your Answer">
                                }
                            </div>
                        </div>

                        <div class="main-content justify-content-between flex-column w-100">
                            @if (question.Media != null && !string.IsNullOrEmpty(question.Media.Path) &&
                            !string.IsNullOrEmpty(question.Media.ContentType))
                            {
                                <div class="image-container w-100 align-items-center">
                                    @if (question.Media.ContentType.Contains("image"))
                                    {
                                        <img src="@question.Media.Path" class="w-100 hero-image rounded"/>
                                    }
                                    @if (question.Media.ContentType.Contains("video"))
                                    {
                                        <VidazorVideo class="w-100 image rounded mb-0" controls="true" muted="false"
                                            type="@question.Media.ContentType">
                                            <source src="@question.Media.Path">
                                        </VidazorVideo>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
                <div class="btn-group d-flex flex-row w-100 gap-1 flex-nowrap justify-contents-center text-center" role="group" aria-label="Question Navigator">
                    <button type="button" class="btn btn-outline-primary form-check w-33 justify-contents-center text-center mx-auto" @onclick="PreviousQuestion" disabled="@IsPreviousDisabled"><i class="fas fa-arrow-left"></i></button>
                    <button type="submit" class="btn btn-outline-primary form-check w-33 justify-contents-center text-center mx-auto" @onclick="SubmitQuiz">Submit</button>
                    <button type="button" class="btn btn-outline-primary form-check w-33 justify-contents-center text-center mx-auto" @onclick="NextQuestion" disabled="@IsNextDisabled"><i class="fas fa-arrow-right"></i></button>
                </div>
            </form>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning" role="alert">
            <p>You need to be authenticated to access this quiz.</p>
            <p>Please <a href="authentication/login">log in</a> to participate.</p>
            <p>If you don't have an account, you can <a href="/Identity/Account/Register?returnUrl=%2Fauthentication%2Flogin">register</a> for one.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int? QuizId { get; set; }
    private QuizModel quizModel = new QuizModel();
    private int activeQuestionIndex = 0;
    private Dictionary<int, bool> questionButtonStates = new Dictionary<int, bool>();

    private bool IsPreviousDisabled => activeQuestionIndex == 0;
    private bool IsNextDisabled => activeQuestionIndex == quizModel.Questions.Count - 1;

    private string activeQuestionClass(int index) => index == activeQuestionIndex ? "" : "hiddenQuestion";

    private async Task SubmitQuiz()
    {
        // Implement quiz submission logic here
        // For now, you can leave this method empty
    }

    private void PreviousQuestion()
    {
        if (activeQuestionIndex > 0)
        {
            activeQuestionIndex--;
        }
    }

    private void NextQuestion()
    {
        if (activeQuestionIndex < quizModel.Questions.Count - 1)
        {
            activeQuestionIndex++;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetAsync($"api/quiz/getquiz/{QuizId}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            quizModel = JsonConvert.DeserializeObject<QuizModel>(content);
            //Console.WriteLine(JsonConvert.SerializeObject(quizModel));
        }
        else
        {
            Console.WriteLine("Could not get a response");
        }
        InitializeQuestionButtonStates();
    }

    private void InitializeQuestionButtonStates()
    {
        foreach (var question in quizModel.Questions)
        {
            questionButtonStates.Add(question.Index, false);
        }
        questionButtonStates[activeQuestionIndex] = true; // Set the first question button to active
    }

    private void UpdateQuestionButtonStates()
    {
        foreach (var key in questionButtonStates.Keys.ToList())
        {
            questionButtonStates[key] = key == activeQuestionIndex;
        }
    }
}
