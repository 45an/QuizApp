@page "/quiz/{QuizId:int}"

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using QuizApp.Client.Shared.Models

@inject IAccessTokenProvider AccessTokenProvider
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        <div class="container pb-4 mb-4">
                @* Container for the quiz info and image *@
                <div class="card block-container text-light flex-grow-1 mb-4 flex-row mediaColumn">
                    <div class="main-content stats justify-content-between rounded">
                        <div class="d-flex flex-row flex-wrap justify-content-between align-items-center py-2 gap-1
                                    border border-secondary rounded stats">
                            <header class="navbar w-100 mb-4 p-0 border-bottom border-2 border-secondary text-light text-center justify-content-center">
                                <h2><strong>@originalQuiz.Title</strong></h2>
                            </header>
                            <div class="stats-container d-flex flex-column w-100 flex-wrap gap-1">
                                <div class="d-flex flex-grow-1 align-items-center align-text-center card-attribute">
                                    <i class="fa-solid fa-star"/>
                                    <p class="text-light"> @originalQuiz.MaxScore</p>
                                </div>
                                <div class="d-flex flex-grow-1 align-items-center align-text-center card-attribute">
                                    <i class="fa-solid fa-clock"/>
                                    <p class="text-light"> @originalQuiz.DateCreated.ToShortDateString()</p>
                                </div>
                                <div class="d-flex flex-grow-1 align-items-center align-text-center card-attribute">
                                    <i class="fa-solid fa-arrow-rotate-left"></i>
                                    <p class="text-light"> Played: @originalQuiz.GamesPlayed</p>
                                </div>
                            </div>
                        </div>
                        <div class="stats-container d-flex flex-column w-100 flex-wrap gap-1 mb-2">
                            <div class="d-flex flex-grow-1 align-items-center align-text-center card-attribute">
                                <i class="fa-solid fa-user"></i><p class="text-light"> Quiz by <span><a class="text-decoration-none" href="@("userQuiz/" + originalQuiz.UserId)">@originalQuiz.UserName</a></span></p>
                            </div>
                        </div>
                    </div>

                    @* Quiz image *@
                    @if (originalQuiz.Media != null && !string.IsNullOrEmpty(originalQuiz.Media.Path) &&
                    !string.IsNullOrEmpty(originalQuiz.Media.ContentType))
                    {
                        <div class="hero-image-container w-100 mw-100 mb-0 align-items-center justify-content-center">
                            @if (originalQuiz.Media.ContentType.Contains("image"))
                            {
                                <img src="@originalQuiz.Media.Path" class="mw-100 hero-image rounded"/>
                            }
                            @if (originalQuiz.Media.ContentType.Contains("video"))
                            {
                                <VidazorVideo class="mw-100 hero-image rounded mb-0" controls="true" muted="false"
                                    type="@originalQuiz.Media.ContentType">
                                    <source src="@originalQuiz.Media.Path">
                                </VidazorVideo>
                            }
                        </div>
                    }
                </div>

            <form>
            @foreach (var question in originalQuiz.Questions)
            {
                @* Container for the question info and image *@
                <div class="@("card block-container text-light justify-center flex-grow-1 mb-3 flex-column " + activeQuestionClass(question.Id))">
                    <div class="d-flex flex-row gap-3 mediaColumn">
                        <div class="main-content stats justify-content-between rounded">
                            <div class="d-flex flex-row flex-wrap justify-content-between align-items-center py-2 gap-1
                                        border border-secondary rounded stats">
                                <header class="navbar w-100 mb-4 p-0 px-2 border-bottom border-2 border-secondary text-light text-center justify-content-center">
                                    <h3><strong>@question.Questions</strong></h3>
                                </header>
                                @if (question.Time != 0)
                                {
                                    <div class="stats-container d-flex flex-column w-100 flex-wrap gap-1">
                                        <div class="d-flex flex-grow-1 align-items-center align-text-center card-attribute">
                                            <i class="fa-solid fa-clock"/>
                                            <p class="text-light">Question has a time limit of @question.Time seconds.</p>
                                        </div>
                                    </div>
                                }
                            </div>

                            @* container and loop for the question input *@
                            <div class="flex-row w-100 p-2">
                                @if (question.MultipleChoice)
                                {
                                    <div class="d-flex flex-column w-100 flex-grow-2 gap-1 flex-nowrap justify-contents-center form-group">
                                        @foreach (var mockAnswer in question.MocksAnswers) {
                                            <div class="d-flex flex-grow-1 form-check align-items-center p-0">
                                                <label @onclick="() => HandleValidInputQuestion(question.Id, mockAnswer.MockAnswer)"
                                                        type="button"
                                                        class="btn form-control w-100 @(GetMultipleChoiceClass(question.Id, mockAnswer.MockAnswer))"
                                                        id="@($"answer-{question.Id}-{mockAnswer.Id}")" required>
                                                    <input type="radio"
                                                        @bind="UserInput[question.Id]"
                                                        class="visually-hidden"
                                                        name="@($"answer-{question.Id}")"
                                                        id="@($"answer-{question.Id}-{mockAnswer.Id}")"
                                                        required/>
                                                    @mockAnswer.MockAnswer
                                                </label>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <input type="text"
                                        @bind="UserInput[question.Id]"
                                        @oninput="(e) => HandleValidInputQuestion(question.Id, e.Value.ToString())"
                                        class="@($"form-control mb-3 {GetMultipleChoiceClass(question.Id, UserInput[question.Id])}")"
                                        placeholder="Your Answer"
                                        name="@($"answer-{question.Id}")"
                                        id="@($"answer-{question.Id}")"
                                        required/>
                                }
                            </div>
                        </div>

                        @* question image *@
                        @if (question.Media != null && !string.IsNullOrEmpty(question.Media.Path) &&
                        !string.IsNullOrEmpty(question.Media.ContentType))
                        {
                            <div class="image-container w-100 mw-100 mb-0 align-items-center justify-content-center">
                                @if (question.Media.ContentType.Contains("image"))
                                {
                                    <img src="@question.Media.Path" class="mw-100 hero-image rounded"/>
                                }
                                @if (question.Media.ContentType.Contains("video"))
                                {
                                    <VidazorVideo class="mw-100 hero-image rounded mb-0" controls="true" muted="false"
                                        type="@question.Media.ContentType">
                                        <source src="@question.Media.Path">
                                    </VidazorVideo>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
                <div class="question-pills d-flex flex-row justify-content-center align-items-center pb-3">
                    @foreach (var question in originalQuiz.Questions)
                    {
                        <div class="@($"question-pill mx-1 rounded {pillClasses[question.Id]}")" @onclick="() => SetActiveQuestion(question.Id)">
                            @question.Id
                        </div>
                    }
                </div>
                <div class="btn-group d-flex flex-row w-100 gap-1 flex-nowrap justify-contents-center text-center" role="group" aria-label="Question Navigator">
                    <button type="button" class="btn btn-outline-primary form-check w-33 justify-contents-center text-center mx-auto"
                    @onclick="PreviousQuestion" disabled="@IsPreviousDisabled"><i class="fas fa-arrow-left"></i></button>

                    <button type="submit" class="btn btn-outline-primary form-check w-33 justify-contents-center text-center mx-auto"
                    @onclick:preventDefault="true" @onclick="SubmitQuiz">Submit</button>

                    <button type="button" class="btn btn-outline-primary form-check w-33 justify-contents-center text-center mx-auto"
                    @onclick="NextQuestion" disabled="@IsNextDisabled"><i class="fas fa-arrow-right"></i></button>
                </div>
            </form>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning" role="alert">
            <p>You need to be authenticated to access this quiz.</p>
            <p>Please <a href="authentication/login">log in</a> to participate.</p>
            <p>If you don't have an account, you can <a href="/Identity/Account/Register?returnUrl=%2Fauthentication%2Flogin">register</a> for one.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int? QuizId { get; set; }
    private QuizModel originalQuiz = new QuizModel();
    private QuizModel answerQuiz = new QuizModel();

    private int activeQuestionId;
    private bool IsPreviousDisabled => originalQuiz.Questions.Count > 0 && activeQuestionId == originalQuiz.Questions.Min(q => q.Id);
    private bool IsNextDisabled => originalQuiz.Questions.Count > 0 && activeQuestionId == originalQuiz.Questions.Max(q => q.Id);
    private string activeQuestionClass(int questionId) => questionId == activeQuestionId ? "" : "hiddenQuestion";
    private string activeQuestionPillClass(int questionId) => questionId == activeQuestionId ? "activePill" : "";
    private string selectedAnswerClass(int questionId, string answer) => UserInput[questionId] == answer ? "activeAnswer" : "";
    private Dictionary<int, string> pillClasses = new Dictionary<int, string>();
    private Dictionary<int, string> UserInput = new Dictionary<int, string>();

    private string GetMultipleChoiceClass(int questionId, string answer) {
        var validInput = IsInputValid(questionId);
        // Check if the question's input is required and not valid
        if (validInput)
        {
            return selectedAnswerClass(questionId, answer);
        }
        else
        {
            return "";
        }
    }

    private string GetPillClass(int questionId)
    {
        var validInput = IsInputValid(questionId);
        // Check if the question's input is required and not valid
        if (validInput)
        {
            return activeQuestionPillClass(questionId);
        }
        else
        {
            return activeQuestionPillClass(questionId) + " invalidPill";
        }
    }

    private bool IsInputValid(int questionId)
    {
        // Find the question corresponding to the provided questionId
        var question = originalQuiz.Questions.FirstOrDefault(q => q.Id == questionId);
        if (question == null)
        {
            return false;
        }

        return !string.IsNullOrWhiteSpace(UserInput[questionId]);
    }

    private void HandleValidInputQuestion(int questionId, string value)
    {
        UserInput[questionId] = value;
        pillClasses[questionId] = GetPillClass(questionId);
    }

    private void SetActiveQuestion(int questionId)
    {
        // Set activeQuestionId
        activeQuestionId = questionId;

        // Update pill classes for all questions
        foreach (var key in pillClasses.Keys.ToList())
        {
            pillClasses[key] = activeQuestionPillClass(questionId);
            if (!IsInputValid(key))
            {
                pillClasses[key] += " invalidPill"; // Add invalidPill class to inactive pills with no input
            }
        }

        // Set active pill class for the current question
        pillClasses[questionId] = GetPillClass(questionId);
    }

    private void PreviousQuestion()
    {
        var prevQuestionId = originalQuiz.Questions.Where(q => q.Id < activeQuestionId).Max(q => q.Id);
        if (prevQuestionId != 0)
        {
            activeQuestionId = prevQuestionId;
        }
        SetActiveQuestion(activeQuestionId);
    }

    private void NextQuestion()
    {
        var nextQuestionId = originalQuiz.Questions.Where(q => q.Id > activeQuestionId).Min(q => q.Id);
        if (nextQuestionId != 0)
        {
            activeQuestionId = nextQuestionId;
        }
        SetActiveQuestion(activeQuestionId);
    }

    protected override async Task OnInitializedAsync()
    {
        await GetQuiz();
        await GetMocks();

        foreach (var question in originalQuiz.Questions)
        {
            UserInput[question.Id] = "";
            pillClasses[question.Id] = GetPillClass(question.Id);
        }
    }

    private async Task GetQuiz() {
        var response = await httpClient.GetAsync($"api/quiz/getquiz/{QuizId}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            originalQuiz = JsonConvert.DeserializeObject<QuizModel>(content);
            Console.WriteLine(JsonConvert.SerializeObject(originalQuiz));
            if (originalQuiz.Questions.Any())
            {
                activeQuestionId = originalQuiz.Questions.First().Id;
            }
        }
        else
        {
            Console.WriteLine("Could not get a response");
        }
    }

    private async Task GetMocks() {
        List<MockModel> newMocksList = new List<MockModel>();

        foreach (var question in originalQuiz.Questions) {
            if (question.MultipleChoice)
            {
                var response = await httpClient.GetAsync($"api/quiz/getmocks/{question.Id}");
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    var mockList = JsonConvert.DeserializeObject<List<MockModel>>(content);

                    // Check if the deserialized list is not null and has elements
                    if (mockList != null && mockList.Any())
                    {
                        // Add each mock model to the question's list of mock answers
                        foreach (var mockModel in mockList)
                        {
                            question.MocksAnswers.Add(mockModel);
                        }
                    }
                    Console.WriteLine(JsonConvert.SerializeObject(mockList));
                }
                else
                {
                    Console.WriteLine("Could not get a response");
                }
            }
        }
    }

    private async Task SubmitQuiz()
    {
        answerQuiz = originalQuiz;

        // Set the answers for each question based on the user input
        foreach (var question in answerQuiz.Questions)
        {
            if (UserInput.ContainsKey(question.Id))
            {
                question.Answer = UserInput[question.Id];
            }
        }

        try
        {
            var jsonContent = JsonConvert.SerializeObject(answerQuiz);
            var content = new StringContent(jsonContent, System.Text.Encoding.UTF8, "application/json");

            var response = await httpClient.PostAsync("/api/Game/savegame", content);
            response.EnsureSuccessStatusCode();

            // Check if the request was successful
            if (response.IsSuccessStatusCode)
            {
                // Game saved successfully
                Console.WriteLine("Game saved successfully!");
            }
            else
            {
                // Failed to save the game
                Console.WriteLine("Failed to save the game.");
            }
        }
        catch (Exception ex)
        {
            // Exception occurred
            Console.WriteLine($"An error occurred while saving the game: {ex.Message}");
        }
    }
}
