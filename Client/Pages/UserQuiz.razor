@page "/userQuiz/{UserId}"

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using QuizApp.Client.Shared.Models

@inject IAccessTokenProvider AccessTokenProvider
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>User Quiz</PageTitle>

<AuthorizeView>
    <Authorized>
        <header class="navbar w-100 mb-4 p-0 border-bottom border-2 border-secondary text-light">
            <h1><strong>Here are Quizzes you have created</strong></h1>
        </header>

        <div class="container pb-4 mb-4">
            <div class="d-flex flex-row flex-shrink flex-wrap w-100 p-0 m-0 mb-4 gap-4 justify-content-center">
            @foreach (var quiz in quizModels)
            {
                <QuizCard quizId="@quiz.Id" quizTemplate="false" />
            }
            </div>
        </div>

        <header class="navbar w-100 mb-4 p-0 border-bottom border-2 border-secondary text-light">
            <h1><strong>Here are Quizzes you have answered</strong></h1>
        </header>

        <div class="container pb-4 mb-4">
            <div class="d-flex flex-row flex-shrink flex-wrap w-100 p-0 m-0 mb-4 gap-4 justify-content-center">
            @foreach (var userAnswer in userAnswers)
            {
                <QuizCard quizId="@userAnswer.AnswerQuiz.Id" quizTemplate="false" />
            }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning" role="alert">
            <p>You need to be authenticated to access this quiz.</p>
            <p>Please <a href="authentication/login">log in</a> to participate.</p>
            <p>If you don't have an account, you can <a href="/Identity/Account/Register?returnUrl=%2Fauthentication%2Flogin">register</a> for one.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public string? UserId { get; set; }

    private List<QuizModel> quizModels = new List<QuizModel>();
    private List<AnswerModel> userAnswers = new List<AnswerModel>();
    private bool isAuthenticated;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        isAuthenticated = authState.User.Identity.IsAuthenticated;

        if (isAuthenticated)
        {
            await GetUserQuiz();
            await GetUserAnswers();
        }
    }

    private async Task GetUserQuiz()
    {
        var response = await httpClient.GetAsync($"api/profile/quizzes/{UserId}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                quizModels = JsonConvert.DeserializeObject<List<QuizModel>>(content);
            }
    }

    private async Task GetUserAnswers()
    {
        var response = await httpClient.GetAsync($"api/profile/answers/{UserId}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                userAnswers = JsonConvert.DeserializeObject<List<AnswerModel>>(content);
            }
    }
}
