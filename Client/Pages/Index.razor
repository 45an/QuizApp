@page "/"

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using QuizApp.Client.Shared.Models

@inject HttpClient httpClient

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <header class="navbar w-100 mb-4 p-0 border-bottom border-2 border-secondary text-light">
            <h1><strong>Welcome To the Quiz Game!</strong></h1>
        </header>

        <div class="container pb-4 mb-4">
            <div class="d-flex flex-row flex-shrink flex-wrap w-100 p-0 m-0 mb-4 gap-4 justify-content-center">
            @foreach (var quiz in quizModels)
            {
                <QuizCard quizId="@quiz.Id" quizTemplate="false" />
            }
            </div>
        </div
    </Authorized>
    <NotAuthorized>
        <div class="container pb-4 mb-4">
            <div class="d-flex flex-row flex-shrink flex-wrap w-100 p-0 m-0 mb-4 gap-4 justify-content-center">
            <div class="alert alert-warning text-light bg-transparent shadow mb-0" role="alert">
                <div class="col w-100">
                    <h1><strong>Welcome to Quiz App!</strong></h1>

                    <p>
                        Quiz App is a comprehensive Blazor application designed for interactive quiz management.<br>
                        Users can effortlessly create, participate in, and share quizzes via unique links. <br>
                        With a user-friendly interface, the platform allows for seamless navigation.
                    </p>

                    <h3><strong>Key Features:</strong></h3>

                    <p>
                        <strong>User Registration and Login:</strong><br>
                        Create your Quiz App account or log in to keep track of your progress and save your scores.
                    </p>

                    <h3><strong>Quiz Management</strong></h3>

                    <p>
                        <strong>Quiz Creation:</strong><br>
                        Effortlessly create quizzes tailored to your preferences.
                    </p>

                    <p>
                        <strong>Quiz Participation and Sharing:</strong><br>
                        Participate in quizzes and share them with others via unique links.
                    </p>

                    <p>
                        <strong>Quiz Tracking:</strong><br>
                        View a list of quizzes you've created and see who has answered them, along with their respective scores.
                    </p>

                    <p>
                        <strong>Quiz Participation:</strong><br>
                        Answer quizzes that you've been linked to and track your performance.
                    </p>
                    <a class="text-decoration-none" href="https://github.com/45an/QuizApp"><h2><i class="fa-brands fa-github"></i> Visit the GitHub!</h2></a>
                </div>
            </div>
                <QuizCard quizId="null" quizTemplate="true" />
                <QuizCard quizId="null" quizTemplate="true" />
                <QuizCard quizId="null" quizTemplate="true" />
                <QuizCard quizId="null" quizTemplate="true" />
                <QuizCard quizId="null" quizTemplate="true" />
                <QuizCard quizId="null" quizTemplate="true" />
                <QuizCard quizId="null" quizTemplate="true" />
                <QuizCard quizId="null" quizTemplate="true" />
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    private List<QuizModel> quizModels = new List<QuizModel>();
    private bool isAuthenticated;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        isAuthenticated = authState.User.Identity.IsAuthenticated;

        if (isAuthenticated)
        {
            var response = await httpClient.GetAsync("api/quiz/getallquizzes");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                quizModels = JsonConvert.DeserializeObject<List<QuizModel>>(content);
            }
        }
    }
}
